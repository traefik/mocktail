// Code generated by mocktail; DO NOT EDIT.

package a

import (
	"a/b"
	"a/c"
	"bytes"
	"context"
	"testing"
	"time"

	"github.com/stretchr/testify/mock"
	"golang.org/x/mod/module"
)

// PineappleMock mock of Pineapple.
type PineappleMock struct{ mock.Mock }

// NewPineappleMock creates a new PineappleMock.
func NewPineappleMock(tb testing.TB) *PineappleMock {
	tb.Helper()

	m := &PineappleMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *PineappleMock) Coo(_ context.Context, bParam string, cParam Water) Water {
	_ret := _m.Called(bParam, cParam)

	if _rf, ok := _ret.Get(0).(func(string, Water) Water); ok {
		return _rf(bParam, cParam)
	}

	_ra0, _ := _ret.Get(0).(Water)

	return _ra0
}

func (_m *PineappleMock) OnCoo(bParam string, cParam Water) *PineappleCooCall {
	return &PineappleCooCall{Call: _m.Mock.On("Coo", bParam, cParam), Parent: _m}
}

func (_m *PineappleMock) OnCooRaw(bParam interface{}, cParam interface{}) *PineappleCooCall {
	return &PineappleCooCall{Call: _m.Mock.On("Coo", bParam, cParam), Parent: _m}
}

type PineappleCooCall struct {
	*mock.Call
	Parent *PineappleMock
}

func (_c *PineappleCooCall) Panic(msg string) *PineappleCooCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *PineappleCooCall) Once() *PineappleCooCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *PineappleCooCall) Twice() *PineappleCooCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *PineappleCooCall) Times(i int) *PineappleCooCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *PineappleCooCall) WaitUntil(w <-chan time.Time) *PineappleCooCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *PineappleCooCall) After(d time.Duration) *PineappleCooCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *PineappleCooCall) Run(fn func(args mock.Arguments)) *PineappleCooCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *PineappleCooCall) Maybe() *PineappleCooCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *PineappleCooCall) TypedReturns(a Water) *PineappleCooCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *PineappleCooCall) ReturnsFn(fn func(string, Water) Water) *PineappleCooCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *PineappleCooCall) TypedRun(fn func(string, Water)) *PineappleCooCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_bParam := args.String(0)
		_cParam, _ := args.Get(1).(Water)
		fn(_bParam, _cParam)
	})
	return _c
}

func (_c *PineappleCooCall) OnCoo(bParam string, cParam Water) *PineappleCooCall {
	return _c.Parent.OnCoo(bParam, cParam)
}

func (_c *PineappleCooCall) OnGoo() *PineappleGooCall {
	return _c.Parent.OnGoo()
}

func (_c *PineappleCooCall) OnHello(bar Water) *PineappleHelloCall {
	return _c.Parent.OnHello(bar)
}

func (_c *PineappleCooCall) OnNoo() *PineappleNooCall {
	return _c.Parent.OnNoo()
}

func (_c *PineappleCooCall) OnWorld() *PineappleWorldCall {
	return _c.Parent.OnWorld()
}

func (_c *PineappleCooCall) OnCooRaw(bParam interface{}, cParam interface{}) *PineappleCooCall {
	return _c.Parent.OnCooRaw(bParam, cParam)
}

func (_c *PineappleCooCall) OnGooRaw() *PineappleGooCall {
	return _c.Parent.OnGooRaw()
}

func (_c *PineappleCooCall) OnHelloRaw(bar interface{}) *PineappleHelloCall {
	return _c.Parent.OnHelloRaw(bar)
}

func (_c *PineappleCooCall) OnNooRaw() *PineappleNooCall {
	return _c.Parent.OnNooRaw()
}

func (_c *PineappleCooCall) OnWorldRaw() *PineappleWorldCall {
	return _c.Parent.OnWorldRaw()
}

func (_m *PineappleMock) Goo() (string, int, Water) {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() (string, int, Water)); ok {
		return _rf()
	}

	_ra0 := _ret.String(0)
	_rb1 := _ret.Int(1)
	_rc2, _ := _ret.Get(2).(Water)

	return _ra0, _rb1, _rc2
}

func (_m *PineappleMock) OnGoo() *PineappleGooCall {
	return &PineappleGooCall{Call: _m.Mock.On("Goo"), Parent: _m}
}

func (_m *PineappleMock) OnGooRaw() *PineappleGooCall {
	return &PineappleGooCall{Call: _m.Mock.On("Goo"), Parent: _m}
}

type PineappleGooCall struct {
	*mock.Call
	Parent *PineappleMock
}

func (_c *PineappleGooCall) Panic(msg string) *PineappleGooCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *PineappleGooCall) Once() *PineappleGooCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *PineappleGooCall) Twice() *PineappleGooCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *PineappleGooCall) Times(i int) *PineappleGooCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *PineappleGooCall) WaitUntil(w <-chan time.Time) *PineappleGooCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *PineappleGooCall) After(d time.Duration) *PineappleGooCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *PineappleGooCall) Run(fn func(args mock.Arguments)) *PineappleGooCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *PineappleGooCall) Maybe() *PineappleGooCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *PineappleGooCall) TypedReturns(a string, b int, c Water) *PineappleGooCall {
	_c.Call = _c.Return(a, b, c)
	return _c
}

func (_c *PineappleGooCall) ReturnsFn(fn func() (string, int, Water)) *PineappleGooCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *PineappleGooCall) TypedRun(fn func()) *PineappleGooCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *PineappleGooCall) OnCoo(bParam string, cParam Water) *PineappleCooCall {
	return _c.Parent.OnCoo(bParam, cParam)
}

func (_c *PineappleGooCall) OnGoo() *PineappleGooCall {
	return _c.Parent.OnGoo()
}

func (_c *PineappleGooCall) OnHello(bar Water) *PineappleHelloCall {
	return _c.Parent.OnHello(bar)
}

func (_c *PineappleGooCall) OnNoo() *PineappleNooCall {
	return _c.Parent.OnNoo()
}

func (_c *PineappleGooCall) OnWorld() *PineappleWorldCall {
	return _c.Parent.OnWorld()
}

func (_c *PineappleGooCall) OnCooRaw(bParam interface{}, cParam interface{}) *PineappleCooCall {
	return _c.Parent.OnCooRaw(bParam, cParam)
}

func (_c *PineappleGooCall) OnGooRaw() *PineappleGooCall {
	return _c.Parent.OnGooRaw()
}

func (_c *PineappleGooCall) OnHelloRaw(bar interface{}) *PineappleHelloCall {
	return _c.Parent.OnHelloRaw(bar)
}

func (_c *PineappleGooCall) OnNooRaw() *PineappleNooCall {
	return _c.Parent.OnNooRaw()
}

func (_c *PineappleGooCall) OnWorldRaw() *PineappleWorldCall {
	return _c.Parent.OnWorldRaw()
}

func (_m *PineappleMock) Hello(bar Water) string {
	_ret := _m.Called(bar)

	if _rf, ok := _ret.Get(0).(func(Water) string); ok {
		return _rf(bar)
	}

	_ra0 := _ret.String(0)

	return _ra0
}

func (_m *PineappleMock) OnHello(bar Water) *PineappleHelloCall {
	return &PineappleHelloCall{Call: _m.Mock.On("Hello", bar), Parent: _m}
}

func (_m *PineappleMock) OnHelloRaw(bar interface{}) *PineappleHelloCall {
	return &PineappleHelloCall{Call: _m.Mock.On("Hello", bar), Parent: _m}
}

type PineappleHelloCall struct {
	*mock.Call
	Parent *PineappleMock
}

func (_c *PineappleHelloCall) Panic(msg string) *PineappleHelloCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *PineappleHelloCall) Once() *PineappleHelloCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *PineappleHelloCall) Twice() *PineappleHelloCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *PineappleHelloCall) Times(i int) *PineappleHelloCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *PineappleHelloCall) WaitUntil(w <-chan time.Time) *PineappleHelloCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *PineappleHelloCall) After(d time.Duration) *PineappleHelloCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *PineappleHelloCall) Run(fn func(args mock.Arguments)) *PineappleHelloCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *PineappleHelloCall) Maybe() *PineappleHelloCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *PineappleHelloCall) TypedReturns(a string) *PineappleHelloCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *PineappleHelloCall) ReturnsFn(fn func(Water) string) *PineappleHelloCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *PineappleHelloCall) TypedRun(fn func(Water)) *PineappleHelloCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_bar, _ := args.Get(0).(Water)
		fn(_bar)
	})
	return _c
}

func (_c *PineappleHelloCall) OnCoo(bParam string, cParam Water) *PineappleCooCall {
	return _c.Parent.OnCoo(bParam, cParam)
}

func (_c *PineappleHelloCall) OnGoo() *PineappleGooCall {
	return _c.Parent.OnGoo()
}

func (_c *PineappleHelloCall) OnHello(bar Water) *PineappleHelloCall {
	return _c.Parent.OnHello(bar)
}

func (_c *PineappleHelloCall) OnNoo() *PineappleNooCall {
	return _c.Parent.OnNoo()
}

func (_c *PineappleHelloCall) OnWorld() *PineappleWorldCall {
	return _c.Parent.OnWorld()
}

func (_c *PineappleHelloCall) OnCooRaw(bParam interface{}, cParam interface{}) *PineappleCooCall {
	return _c.Parent.OnCooRaw(bParam, cParam)
}

func (_c *PineappleHelloCall) OnGooRaw() *PineappleGooCall {
	return _c.Parent.OnGooRaw()
}

func (_c *PineappleHelloCall) OnHelloRaw(bar interface{}) *PineappleHelloCall {
	return _c.Parent.OnHelloRaw(bar)
}

func (_c *PineappleHelloCall) OnNooRaw() *PineappleNooCall {
	return _c.Parent.OnNooRaw()
}

func (_c *PineappleHelloCall) OnWorldRaw() *PineappleWorldCall {
	return _c.Parent.OnWorldRaw()
}

func (_m *PineappleMock) Noo(_ context.Context) string {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() string); ok {
		return _rf()
	}

	_ra0 := _ret.String(0)

	return _ra0
}

func (_m *PineappleMock) OnNoo() *PineappleNooCall {
	return &PineappleNooCall{Call: _m.Mock.On("Noo"), Parent: _m}
}

func (_m *PineappleMock) OnNooRaw() *PineappleNooCall {
	return &PineappleNooCall{Call: _m.Mock.On("Noo"), Parent: _m}
}

type PineappleNooCall struct {
	*mock.Call
	Parent *PineappleMock
}

func (_c *PineappleNooCall) Panic(msg string) *PineappleNooCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *PineappleNooCall) Once() *PineappleNooCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *PineappleNooCall) Twice() *PineappleNooCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *PineappleNooCall) Times(i int) *PineappleNooCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *PineappleNooCall) WaitUntil(w <-chan time.Time) *PineappleNooCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *PineappleNooCall) After(d time.Duration) *PineappleNooCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *PineappleNooCall) Run(fn func(args mock.Arguments)) *PineappleNooCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *PineappleNooCall) Maybe() *PineappleNooCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *PineappleNooCall) TypedReturns(a string) *PineappleNooCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *PineappleNooCall) ReturnsFn(fn func() string) *PineappleNooCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *PineappleNooCall) TypedRun(fn func()) *PineappleNooCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *PineappleNooCall) OnCoo(bParam string, cParam Water) *PineappleCooCall {
	return _c.Parent.OnCoo(bParam, cParam)
}

func (_c *PineappleNooCall) OnGoo() *PineappleGooCall {
	return _c.Parent.OnGoo()
}

func (_c *PineappleNooCall) OnHello(bar Water) *PineappleHelloCall {
	return _c.Parent.OnHello(bar)
}

func (_c *PineappleNooCall) OnNoo() *PineappleNooCall {
	return _c.Parent.OnNoo()
}

func (_c *PineappleNooCall) OnWorld() *PineappleWorldCall {
	return _c.Parent.OnWorld()
}

func (_c *PineappleNooCall) OnCooRaw(bParam interface{}, cParam interface{}) *PineappleCooCall {
	return _c.Parent.OnCooRaw(bParam, cParam)
}

func (_c *PineappleNooCall) OnGooRaw() *PineappleGooCall {
	return _c.Parent.OnGooRaw()
}

func (_c *PineappleNooCall) OnHelloRaw(bar interface{}) *PineappleHelloCall {
	return _c.Parent.OnHelloRaw(bar)
}

func (_c *PineappleNooCall) OnNooRaw() *PineappleNooCall {
	return _c.Parent.OnNooRaw()
}

func (_c *PineappleNooCall) OnWorldRaw() *PineappleWorldCall {
	return _c.Parent.OnWorldRaw()
}

func (_m *PineappleMock) World() string {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() string); ok {
		return _rf()
	}

	_ra0 := _ret.String(0)

	return _ra0
}

func (_m *PineappleMock) OnWorld() *PineappleWorldCall {
	return &PineappleWorldCall{Call: _m.Mock.On("World"), Parent: _m}
}

func (_m *PineappleMock) OnWorldRaw() *PineappleWorldCall {
	return &PineappleWorldCall{Call: _m.Mock.On("World"), Parent: _m}
}

type PineappleWorldCall struct {
	*mock.Call
	Parent *PineappleMock
}

func (_c *PineappleWorldCall) Panic(msg string) *PineappleWorldCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *PineappleWorldCall) Once() *PineappleWorldCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *PineappleWorldCall) Twice() *PineappleWorldCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *PineappleWorldCall) Times(i int) *PineappleWorldCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *PineappleWorldCall) WaitUntil(w <-chan time.Time) *PineappleWorldCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *PineappleWorldCall) After(d time.Duration) *PineappleWorldCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *PineappleWorldCall) Run(fn func(args mock.Arguments)) *PineappleWorldCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *PineappleWorldCall) Maybe() *PineappleWorldCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *PineappleWorldCall) TypedReturns(a string) *PineappleWorldCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *PineappleWorldCall) ReturnsFn(fn func() string) *PineappleWorldCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *PineappleWorldCall) TypedRun(fn func()) *PineappleWorldCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *PineappleWorldCall) OnCoo(bParam string, cParam Water) *PineappleCooCall {
	return _c.Parent.OnCoo(bParam, cParam)
}

func (_c *PineappleWorldCall) OnGoo() *PineappleGooCall {
	return _c.Parent.OnGoo()
}

func (_c *PineappleWorldCall) OnHello(bar Water) *PineappleHelloCall {
	return _c.Parent.OnHello(bar)
}

func (_c *PineappleWorldCall) OnNoo() *PineappleNooCall {
	return _c.Parent.OnNoo()
}

func (_c *PineappleWorldCall) OnWorld() *PineappleWorldCall {
	return _c.Parent.OnWorld()
}

func (_c *PineappleWorldCall) OnCooRaw(bParam interface{}, cParam interface{}) *PineappleCooCall {
	return _c.Parent.OnCooRaw(bParam, cParam)
}

func (_c *PineappleWorldCall) OnGooRaw() *PineappleGooCall {
	return _c.Parent.OnGooRaw()
}

func (_c *PineappleWorldCall) OnHelloRaw(bar interface{}) *PineappleHelloCall {
	return _c.Parent.OnHelloRaw(bar)
}

func (_c *PineappleWorldCall) OnNooRaw() *PineappleNooCall {
	return _c.Parent.OnNooRaw()
}

func (_c *PineappleWorldCall) OnWorldRaw() *PineappleWorldCall {
	return _c.Parent.OnWorldRaw()
}

// CoconutMock mock of Coconut.
type CoconutMock struct{ mock.Mock }

// NewCoconutMock creates a new CoconutMock.
func NewCoconutMock(tb testing.TB) *CoconutMock {
	tb.Helper()

	m := &CoconutMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *CoconutMock) Boo(src *bytes.Buffer) time.Duration {
	_ret := _m.Called(src)

	if _rf, ok := _ret.Get(0).(func(*bytes.Buffer) time.Duration); ok {
		return _rf(src)
	}

	_ra0, _ := _ret.Get(0).(time.Duration)

	return _ra0
}

func (_m *CoconutMock) OnBoo(src *bytes.Buffer) *CoconutBooCall {
	return &CoconutBooCall{Call: _m.Mock.On("Boo", src), Parent: _m}
}

func (_m *CoconutMock) OnBooRaw(src interface{}) *CoconutBooCall {
	return &CoconutBooCall{Call: _m.Mock.On("Boo", src), Parent: _m}
}

type CoconutBooCall struct {
	*mock.Call
	Parent *CoconutMock
}

func (_c *CoconutBooCall) Panic(msg string) *CoconutBooCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *CoconutBooCall) Once() *CoconutBooCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *CoconutBooCall) Twice() *CoconutBooCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *CoconutBooCall) Times(i int) *CoconutBooCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *CoconutBooCall) WaitUntil(w <-chan time.Time) *CoconutBooCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *CoconutBooCall) After(d time.Duration) *CoconutBooCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *CoconutBooCall) Run(fn func(args mock.Arguments)) *CoconutBooCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *CoconutBooCall) Maybe() *CoconutBooCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *CoconutBooCall) TypedReturns(a time.Duration) *CoconutBooCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *CoconutBooCall) ReturnsFn(fn func(*bytes.Buffer) time.Duration) *CoconutBooCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *CoconutBooCall) TypedRun(fn func(*bytes.Buffer)) *CoconutBooCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_src, _ := args.Get(0).(*bytes.Buffer)
		fn(_src)
	})
	return _c
}

func (_c *CoconutBooCall) OnBoo(src *bytes.Buffer) *CoconutBooCall {
	return _c.Parent.OnBoo(src)
}

func (_c *CoconutBooCall) OnDoo(src time.Duration) *CoconutDooCall {
	return _c.Parent.OnDoo(src)
}

func (_c *CoconutBooCall) OnFoo(st Strawberry) *CoconutFooCall {
	return _c.Parent.OnFoo(st)
}

func (_c *CoconutBooCall) OnGoo(st string) *CoconutGooCall {
	return _c.Parent.OnGoo(st)
}

func (_c *CoconutBooCall) OnHoo(aParam string, bParam int, cParam Water) *CoconutHooCall {
	return _c.Parent.OnHoo(aParam, bParam, cParam)
}

func (_c *CoconutBooCall) OnJoo(aParam string, bParam int, cParam Water) *CoconutJooCall {
	return _c.Parent.OnJoo(aParam, bParam, cParam)
}

func (_c *CoconutBooCall) OnKoo(src string) *CoconutKooCall {
	return _c.Parent.OnKoo(src)
}

func (_c *CoconutBooCall) OnLoo(st string, values []int) *CoconutLooCall {
	return _c.Parent.OnLoo(st, values...)
}

func (_c *CoconutBooCall) OnMoo(fn func(Strawberry, Strawberry) Pineapple) *CoconutMooCall {
	return _c.Parent.OnMoo(fn)
}

func (_c *CoconutBooCall) OnToo(src string) *CoconutTooCall {
	return _c.Parent.OnToo(src)
}

func (_c *CoconutBooCall) OnVoo(src *module.Version) *CoconutVooCall {
	return _c.Parent.OnVoo(src)
}

func (_c *CoconutBooCall) OnYoo(st string) *CoconutYooCall {
	return _c.Parent.OnYoo(st)
}

func (_c *CoconutBooCall) OnZoo(st interface{}) *CoconutZooCall {
	return _c.Parent.OnZoo(st)
}

func (_c *CoconutBooCall) OnBooRaw(src interface{}) *CoconutBooCall {
	return _c.Parent.OnBooRaw(src)
}

func (_c *CoconutBooCall) OnDooRaw(src interface{}) *CoconutDooCall {
	return _c.Parent.OnDooRaw(src)
}

func (_c *CoconutBooCall) OnFooRaw(st interface{}) *CoconutFooCall {
	return _c.Parent.OnFooRaw(st)
}

func (_c *CoconutBooCall) OnGooRaw(st interface{}) *CoconutGooCall {
	return _c.Parent.OnGooRaw(st)
}

func (_c *CoconutBooCall) OnHooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *CoconutHooCall {
	return _c.Parent.OnHooRaw(aParam, bParam, cParam)
}

func (_c *CoconutBooCall) OnJooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *CoconutJooCall {
	return _c.Parent.OnJooRaw(aParam, bParam, cParam)
}

func (_c *CoconutBooCall) OnKooRaw(src interface{}) *CoconutKooCall {
	return _c.Parent.OnKooRaw(src)
}

func (_c *CoconutBooCall) OnLooRaw(st interface{}, values interface{}) *CoconutLooCall {
	return _c.Parent.OnLooRaw(st, values)
}

func (_c *CoconutBooCall) OnMooRaw(fn interface{}) *CoconutMooCall {
	return _c.Parent.OnMooRaw(fn)
}

func (_c *CoconutBooCall) OnTooRaw(src interface{}) *CoconutTooCall {
	return _c.Parent.OnTooRaw(src)
}

func (_c *CoconutBooCall) OnVooRaw(src interface{}) *CoconutVooCall {
	return _c.Parent.OnVooRaw(src)
}

func (_c *CoconutBooCall) OnYooRaw(st interface{}) *CoconutYooCall {
	return _c.Parent.OnYooRaw(st)
}

func (_c *CoconutBooCall) OnZooRaw(st interface{}) *CoconutZooCall {
	return _c.Parent.OnZooRaw(st)
}

func (_m *CoconutMock) Doo(src time.Duration) time.Duration {
	_ret := _m.Called(src)

	if _rf, ok := _ret.Get(0).(func(time.Duration) time.Duration); ok {
		return _rf(src)
	}

	_ra0, _ := _ret.Get(0).(time.Duration)

	return _ra0
}

func (_m *CoconutMock) OnDoo(src time.Duration) *CoconutDooCall {
	return &CoconutDooCall{Call: _m.Mock.On("Doo", src), Parent: _m}
}

func (_m *CoconutMock) OnDooRaw(src interface{}) *CoconutDooCall {
	return &CoconutDooCall{Call: _m.Mock.On("Doo", src), Parent: _m}
}

type CoconutDooCall struct {
	*mock.Call
	Parent *CoconutMock
}

func (_c *CoconutDooCall) Panic(msg string) *CoconutDooCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *CoconutDooCall) Once() *CoconutDooCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *CoconutDooCall) Twice() *CoconutDooCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *CoconutDooCall) Times(i int) *CoconutDooCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *CoconutDooCall) WaitUntil(w <-chan time.Time) *CoconutDooCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *CoconutDooCall) After(d time.Duration) *CoconutDooCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *CoconutDooCall) Run(fn func(args mock.Arguments)) *CoconutDooCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *CoconutDooCall) Maybe() *CoconutDooCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *CoconutDooCall) TypedReturns(a time.Duration) *CoconutDooCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *CoconutDooCall) ReturnsFn(fn func(time.Duration) time.Duration) *CoconutDooCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *CoconutDooCall) TypedRun(fn func(time.Duration)) *CoconutDooCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_src, _ := args.Get(0).(time.Duration)
		fn(_src)
	})
	return _c
}

func (_c *CoconutDooCall) OnBoo(src *bytes.Buffer) *CoconutBooCall {
	return _c.Parent.OnBoo(src)
}

func (_c *CoconutDooCall) OnDoo(src time.Duration) *CoconutDooCall {
	return _c.Parent.OnDoo(src)
}

func (_c *CoconutDooCall) OnFoo(st Strawberry) *CoconutFooCall {
	return _c.Parent.OnFoo(st)
}

func (_c *CoconutDooCall) OnGoo(st string) *CoconutGooCall {
	return _c.Parent.OnGoo(st)
}

func (_c *CoconutDooCall) OnHoo(aParam string, bParam int, cParam Water) *CoconutHooCall {
	return _c.Parent.OnHoo(aParam, bParam, cParam)
}

func (_c *CoconutDooCall) OnJoo(aParam string, bParam int, cParam Water) *CoconutJooCall {
	return _c.Parent.OnJoo(aParam, bParam, cParam)
}

func (_c *CoconutDooCall) OnKoo(src string) *CoconutKooCall {
	return _c.Parent.OnKoo(src)
}

func (_c *CoconutDooCall) OnLoo(st string, values []int) *CoconutLooCall {
	return _c.Parent.OnLoo(st, values...)
}

func (_c *CoconutDooCall) OnMoo(fn func(Strawberry, Strawberry) Pineapple) *CoconutMooCall {
	return _c.Parent.OnMoo(fn)
}

func (_c *CoconutDooCall) OnToo(src string) *CoconutTooCall {
	return _c.Parent.OnToo(src)
}

func (_c *CoconutDooCall) OnVoo(src *module.Version) *CoconutVooCall {
	return _c.Parent.OnVoo(src)
}

func (_c *CoconutDooCall) OnYoo(st string) *CoconutYooCall {
	return _c.Parent.OnYoo(st)
}

func (_c *CoconutDooCall) OnZoo(st interface{}) *CoconutZooCall {
	return _c.Parent.OnZoo(st)
}

func (_c *CoconutDooCall) OnBooRaw(src interface{}) *CoconutBooCall {
	return _c.Parent.OnBooRaw(src)
}

func (_c *CoconutDooCall) OnDooRaw(src interface{}) *CoconutDooCall {
	return _c.Parent.OnDooRaw(src)
}

func (_c *CoconutDooCall) OnFooRaw(st interface{}) *CoconutFooCall {
	return _c.Parent.OnFooRaw(st)
}

func (_c *CoconutDooCall) OnGooRaw(st interface{}) *CoconutGooCall {
	return _c.Parent.OnGooRaw(st)
}

func (_c *CoconutDooCall) OnHooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *CoconutHooCall {
	return _c.Parent.OnHooRaw(aParam, bParam, cParam)
}

func (_c *CoconutDooCall) OnJooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *CoconutJooCall {
	return _c.Parent.OnJooRaw(aParam, bParam, cParam)
}

func (_c *CoconutDooCall) OnKooRaw(src interface{}) *CoconutKooCall {
	return _c.Parent.OnKooRaw(src)
}

func (_c *CoconutDooCall) OnLooRaw(st interface{}, values interface{}) *CoconutLooCall {
	return _c.Parent.OnLooRaw(st, values)
}

func (_c *CoconutDooCall) OnMooRaw(fn interface{}) *CoconutMooCall {
	return _c.Parent.OnMooRaw(fn)
}

func (_c *CoconutDooCall) OnTooRaw(src interface{}) *CoconutTooCall {
	return _c.Parent.OnTooRaw(src)
}

func (_c *CoconutDooCall) OnVooRaw(src interface{}) *CoconutVooCall {
	return _c.Parent.OnVooRaw(src)
}

func (_c *CoconutDooCall) OnYooRaw(st interface{}) *CoconutYooCall {
	return _c.Parent.OnYooRaw(st)
}

func (_c *CoconutDooCall) OnZooRaw(st interface{}) *CoconutZooCall {
	return _c.Parent.OnZooRaw(st)
}

func (_m *CoconutMock) Foo(st Strawberry) string {
	_ret := _m.Called(st)

	if _rf, ok := _ret.Get(0).(func(Strawberry) string); ok {
		return _rf(st)
	}

	_ra0 := _ret.String(0)

	return _ra0
}

func (_m *CoconutMock) OnFoo(st Strawberry) *CoconutFooCall {
	return &CoconutFooCall{Call: _m.Mock.On("Foo", st), Parent: _m}
}

func (_m *CoconutMock) OnFooRaw(st interface{}) *CoconutFooCall {
	return &CoconutFooCall{Call: _m.Mock.On("Foo", st), Parent: _m}
}

type CoconutFooCall struct {
	*mock.Call
	Parent *CoconutMock
}

func (_c *CoconutFooCall) Panic(msg string) *CoconutFooCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *CoconutFooCall) Once() *CoconutFooCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *CoconutFooCall) Twice() *CoconutFooCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *CoconutFooCall) Times(i int) *CoconutFooCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *CoconutFooCall) WaitUntil(w <-chan time.Time) *CoconutFooCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *CoconutFooCall) After(d time.Duration) *CoconutFooCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *CoconutFooCall) Run(fn func(args mock.Arguments)) *CoconutFooCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *CoconutFooCall) Maybe() *CoconutFooCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *CoconutFooCall) TypedReturns(a string) *CoconutFooCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *CoconutFooCall) ReturnsFn(fn func(Strawberry) string) *CoconutFooCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *CoconutFooCall) TypedRun(fn func(Strawberry)) *CoconutFooCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_st, _ := args.Get(0).(Strawberry)
		fn(_st)
	})
	return _c
}

func (_c *CoconutFooCall) OnBoo(src *bytes.Buffer) *CoconutBooCall {
	return _c.Parent.OnBoo(src)
}

func (_c *CoconutFooCall) OnDoo(src time.Duration) *CoconutDooCall {
	return _c.Parent.OnDoo(src)
}

func (_c *CoconutFooCall) OnFoo(st Strawberry) *CoconutFooCall {
	return _c.Parent.OnFoo(st)
}

func (_c *CoconutFooCall) OnGoo(st string) *CoconutGooCall {
	return _c.Parent.OnGoo(st)
}

func (_c *CoconutFooCall) OnHoo(aParam string, bParam int, cParam Water) *CoconutHooCall {
	return _c.Parent.OnHoo(aParam, bParam, cParam)
}

func (_c *CoconutFooCall) OnJoo(aParam string, bParam int, cParam Water) *CoconutJooCall {
	return _c.Parent.OnJoo(aParam, bParam, cParam)
}

func (_c *CoconutFooCall) OnKoo(src string) *CoconutKooCall {
	return _c.Parent.OnKoo(src)
}

func (_c *CoconutFooCall) OnLoo(st string, values []int) *CoconutLooCall {
	return _c.Parent.OnLoo(st, values...)
}

func (_c *CoconutFooCall) OnMoo(fn func(Strawberry, Strawberry) Pineapple) *CoconutMooCall {
	return _c.Parent.OnMoo(fn)
}

func (_c *CoconutFooCall) OnToo(src string) *CoconutTooCall {
	return _c.Parent.OnToo(src)
}

func (_c *CoconutFooCall) OnVoo(src *module.Version) *CoconutVooCall {
	return _c.Parent.OnVoo(src)
}

func (_c *CoconutFooCall) OnYoo(st string) *CoconutYooCall {
	return _c.Parent.OnYoo(st)
}

func (_c *CoconutFooCall) OnZoo(st interface{}) *CoconutZooCall {
	return _c.Parent.OnZoo(st)
}

func (_c *CoconutFooCall) OnBooRaw(src interface{}) *CoconutBooCall {
	return _c.Parent.OnBooRaw(src)
}

func (_c *CoconutFooCall) OnDooRaw(src interface{}) *CoconutDooCall {
	return _c.Parent.OnDooRaw(src)
}

func (_c *CoconutFooCall) OnFooRaw(st interface{}) *CoconutFooCall {
	return _c.Parent.OnFooRaw(st)
}

func (_c *CoconutFooCall) OnGooRaw(st interface{}) *CoconutGooCall {
	return _c.Parent.OnGooRaw(st)
}

func (_c *CoconutFooCall) OnHooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *CoconutHooCall {
	return _c.Parent.OnHooRaw(aParam, bParam, cParam)
}

func (_c *CoconutFooCall) OnJooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *CoconutJooCall {
	return _c.Parent.OnJooRaw(aParam, bParam, cParam)
}

func (_c *CoconutFooCall) OnKooRaw(src interface{}) *CoconutKooCall {
	return _c.Parent.OnKooRaw(src)
}

func (_c *CoconutFooCall) OnLooRaw(st interface{}, values interface{}) *CoconutLooCall {
	return _c.Parent.OnLooRaw(st, values)
}

func (_c *CoconutFooCall) OnMooRaw(fn interface{}) *CoconutMooCall {
	return _c.Parent.OnMooRaw(fn)
}

func (_c *CoconutFooCall) OnTooRaw(src interface{}) *CoconutTooCall {
	return _c.Parent.OnTooRaw(src)
}

func (_c *CoconutFooCall) OnVooRaw(src interface{}) *CoconutVooCall {
	return _c.Parent.OnVooRaw(src)
}

func (_c *CoconutFooCall) OnYooRaw(st interface{}) *CoconutYooCall {
	return _c.Parent.OnYooRaw(st)
}

func (_c *CoconutFooCall) OnZooRaw(st interface{}) *CoconutZooCall {
	return _c.Parent.OnZooRaw(st)
}

func (_m *CoconutMock) Goo(st string) Strawberry {
	_ret := _m.Called(st)

	if _rf, ok := _ret.Get(0).(func(string) Strawberry); ok {
		return _rf(st)
	}

	_ra0, _ := _ret.Get(0).(Strawberry)

	return _ra0
}

func (_m *CoconutMock) OnGoo(st string) *CoconutGooCall {
	return &CoconutGooCall{Call: _m.Mock.On("Goo", st), Parent: _m}
}

func (_m *CoconutMock) OnGooRaw(st interface{}) *CoconutGooCall {
	return &CoconutGooCall{Call: _m.Mock.On("Goo", st), Parent: _m}
}

type CoconutGooCall struct {
	*mock.Call
	Parent *CoconutMock
}

func (_c *CoconutGooCall) Panic(msg string) *CoconutGooCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *CoconutGooCall) Once() *CoconutGooCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *CoconutGooCall) Twice() *CoconutGooCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *CoconutGooCall) Times(i int) *CoconutGooCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *CoconutGooCall) WaitUntil(w <-chan time.Time) *CoconutGooCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *CoconutGooCall) After(d time.Duration) *CoconutGooCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *CoconutGooCall) Run(fn func(args mock.Arguments)) *CoconutGooCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *CoconutGooCall) Maybe() *CoconutGooCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *CoconutGooCall) TypedReturns(a Strawberry) *CoconutGooCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *CoconutGooCall) ReturnsFn(fn func(string) Strawberry) *CoconutGooCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *CoconutGooCall) TypedRun(fn func(string)) *CoconutGooCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_st := args.String(0)
		fn(_st)
	})
	return _c
}

func (_c *CoconutGooCall) OnBoo(src *bytes.Buffer) *CoconutBooCall {
	return _c.Parent.OnBoo(src)
}

func (_c *CoconutGooCall) OnDoo(src time.Duration) *CoconutDooCall {
	return _c.Parent.OnDoo(src)
}

func (_c *CoconutGooCall) OnFoo(st Strawberry) *CoconutFooCall {
	return _c.Parent.OnFoo(st)
}

func (_c *CoconutGooCall) OnGoo(st string) *CoconutGooCall {
	return _c.Parent.OnGoo(st)
}

func (_c *CoconutGooCall) OnHoo(aParam string, bParam int, cParam Water) *CoconutHooCall {
	return _c.Parent.OnHoo(aParam, bParam, cParam)
}

func (_c *CoconutGooCall) OnJoo(aParam string, bParam int, cParam Water) *CoconutJooCall {
	return _c.Parent.OnJoo(aParam, bParam, cParam)
}

func (_c *CoconutGooCall) OnKoo(src string) *CoconutKooCall {
	return _c.Parent.OnKoo(src)
}

func (_c *CoconutGooCall) OnLoo(st string, values []int) *CoconutLooCall {
	return _c.Parent.OnLoo(st, values...)
}

func (_c *CoconutGooCall) OnMoo(fn func(Strawberry, Strawberry) Pineapple) *CoconutMooCall {
	return _c.Parent.OnMoo(fn)
}

func (_c *CoconutGooCall) OnToo(src string) *CoconutTooCall {
	return _c.Parent.OnToo(src)
}

func (_c *CoconutGooCall) OnVoo(src *module.Version) *CoconutVooCall {
	return _c.Parent.OnVoo(src)
}

func (_c *CoconutGooCall) OnYoo(st string) *CoconutYooCall {
	return _c.Parent.OnYoo(st)
}

func (_c *CoconutGooCall) OnZoo(st interface{}) *CoconutZooCall {
	return _c.Parent.OnZoo(st)
}

func (_c *CoconutGooCall) OnBooRaw(src interface{}) *CoconutBooCall {
	return _c.Parent.OnBooRaw(src)
}

func (_c *CoconutGooCall) OnDooRaw(src interface{}) *CoconutDooCall {
	return _c.Parent.OnDooRaw(src)
}

func (_c *CoconutGooCall) OnFooRaw(st interface{}) *CoconutFooCall {
	return _c.Parent.OnFooRaw(st)
}

func (_c *CoconutGooCall) OnGooRaw(st interface{}) *CoconutGooCall {
	return _c.Parent.OnGooRaw(st)
}

func (_c *CoconutGooCall) OnHooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *CoconutHooCall {
	return _c.Parent.OnHooRaw(aParam, bParam, cParam)
}

func (_c *CoconutGooCall) OnJooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *CoconutJooCall {
	return _c.Parent.OnJooRaw(aParam, bParam, cParam)
}

func (_c *CoconutGooCall) OnKooRaw(src interface{}) *CoconutKooCall {
	return _c.Parent.OnKooRaw(src)
}

func (_c *CoconutGooCall) OnLooRaw(st interface{}, values interface{}) *CoconutLooCall {
	return _c.Parent.OnLooRaw(st, values)
}

func (_c *CoconutGooCall) OnMooRaw(fn interface{}) *CoconutMooCall {
	return _c.Parent.OnMooRaw(fn)
}

func (_c *CoconutGooCall) OnTooRaw(src interface{}) *CoconutTooCall {
	return _c.Parent.OnTooRaw(src)
}

func (_c *CoconutGooCall) OnVooRaw(src interface{}) *CoconutVooCall {
	return _c.Parent.OnVooRaw(src)
}

func (_c *CoconutGooCall) OnYooRaw(st interface{}) *CoconutYooCall {
	return _c.Parent.OnYooRaw(st)
}

func (_c *CoconutGooCall) OnZooRaw(st interface{}) *CoconutZooCall {
	return _c.Parent.OnZooRaw(st)
}

func (_m *CoconutMock) Hoo(aParam string, bParam int, cParam Water) {
	_m.Called(aParam, bParam, cParam)
}

func (_m *CoconutMock) OnHoo(aParam string, bParam int, cParam Water) *CoconutHooCall {
	return &CoconutHooCall{Call: _m.Mock.On("Hoo", aParam, bParam, cParam), Parent: _m}
}

func (_m *CoconutMock) OnHooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *CoconutHooCall {
	return &CoconutHooCall{Call: _m.Mock.On("Hoo", aParam, bParam, cParam), Parent: _m}
}

type CoconutHooCall struct {
	*mock.Call
	Parent *CoconutMock
}

func (_c *CoconutHooCall) Panic(msg string) *CoconutHooCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *CoconutHooCall) Once() *CoconutHooCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *CoconutHooCall) Twice() *CoconutHooCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *CoconutHooCall) Times(i int) *CoconutHooCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *CoconutHooCall) WaitUntil(w <-chan time.Time) *CoconutHooCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *CoconutHooCall) After(d time.Duration) *CoconutHooCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *CoconutHooCall) Run(fn func(args mock.Arguments)) *CoconutHooCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *CoconutHooCall) Maybe() *CoconutHooCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *CoconutHooCall) TypedRun(fn func(string, int, Water)) *CoconutHooCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_aParam := args.String(0)
		_bParam := args.Int(1)
		_cParam, _ := args.Get(2).(Water)
		fn(_aParam, _bParam, _cParam)
	})
	return _c
}

func (_c *CoconutHooCall) OnBoo(src *bytes.Buffer) *CoconutBooCall {
	return _c.Parent.OnBoo(src)
}

func (_c *CoconutHooCall) OnDoo(src time.Duration) *CoconutDooCall {
	return _c.Parent.OnDoo(src)
}

func (_c *CoconutHooCall) OnFoo(st Strawberry) *CoconutFooCall {
	return _c.Parent.OnFoo(st)
}

func (_c *CoconutHooCall) OnGoo(st string) *CoconutGooCall {
	return _c.Parent.OnGoo(st)
}

func (_c *CoconutHooCall) OnHoo(aParam string, bParam int, cParam Water) *CoconutHooCall {
	return _c.Parent.OnHoo(aParam, bParam, cParam)
}

func (_c *CoconutHooCall) OnJoo(aParam string, bParam int, cParam Water) *CoconutJooCall {
	return _c.Parent.OnJoo(aParam, bParam, cParam)
}

func (_c *CoconutHooCall) OnKoo(src string) *CoconutKooCall {
	return _c.Parent.OnKoo(src)
}

func (_c *CoconutHooCall) OnLoo(st string, values []int) *CoconutLooCall {
	return _c.Parent.OnLoo(st, values...)
}

func (_c *CoconutHooCall) OnMoo(fn func(Strawberry, Strawberry) Pineapple) *CoconutMooCall {
	return _c.Parent.OnMoo(fn)
}

func (_c *CoconutHooCall) OnToo(src string) *CoconutTooCall {
	return _c.Parent.OnToo(src)
}

func (_c *CoconutHooCall) OnVoo(src *module.Version) *CoconutVooCall {
	return _c.Parent.OnVoo(src)
}

func (_c *CoconutHooCall) OnYoo(st string) *CoconutYooCall {
	return _c.Parent.OnYoo(st)
}

func (_c *CoconutHooCall) OnZoo(st interface{}) *CoconutZooCall {
	return _c.Parent.OnZoo(st)
}

func (_c *CoconutHooCall) OnBooRaw(src interface{}) *CoconutBooCall {
	return _c.Parent.OnBooRaw(src)
}

func (_c *CoconutHooCall) OnDooRaw(src interface{}) *CoconutDooCall {
	return _c.Parent.OnDooRaw(src)
}

func (_c *CoconutHooCall) OnFooRaw(st interface{}) *CoconutFooCall {
	return _c.Parent.OnFooRaw(st)
}

func (_c *CoconutHooCall) OnGooRaw(st interface{}) *CoconutGooCall {
	return _c.Parent.OnGooRaw(st)
}

func (_c *CoconutHooCall) OnHooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *CoconutHooCall {
	return _c.Parent.OnHooRaw(aParam, bParam, cParam)
}

func (_c *CoconutHooCall) OnJooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *CoconutJooCall {
	return _c.Parent.OnJooRaw(aParam, bParam, cParam)
}

func (_c *CoconutHooCall) OnKooRaw(src interface{}) *CoconutKooCall {
	return _c.Parent.OnKooRaw(src)
}

func (_c *CoconutHooCall) OnLooRaw(st interface{}, values interface{}) *CoconutLooCall {
	return _c.Parent.OnLooRaw(st, values)
}

func (_c *CoconutHooCall) OnMooRaw(fn interface{}) *CoconutMooCall {
	return _c.Parent.OnMooRaw(fn)
}

func (_c *CoconutHooCall) OnTooRaw(src interface{}) *CoconutTooCall {
	return _c.Parent.OnTooRaw(src)
}

func (_c *CoconutHooCall) OnVooRaw(src interface{}) *CoconutVooCall {
	return _c.Parent.OnVooRaw(src)
}

func (_c *CoconutHooCall) OnYooRaw(st interface{}) *CoconutYooCall {
	return _c.Parent.OnYooRaw(st)
}

func (_c *CoconutHooCall) OnZooRaw(st interface{}) *CoconutZooCall {
	return _c.Parent.OnZooRaw(st)
}

func (_m *CoconutMock) Joo(aParam string, bParam int, cParam Water) (string, int) {
	_ret := _m.Called(aParam, bParam, cParam)

	if _rf, ok := _ret.Get(0).(func(string, int, Water) (string, int)); ok {
		return _rf(aParam, bParam, cParam)
	}

	_ra0 := _ret.String(0)
	_rb1 := _ret.Int(1)

	return _ra0, _rb1
}

func (_m *CoconutMock) OnJoo(aParam string, bParam int, cParam Water) *CoconutJooCall {
	return &CoconutJooCall{Call: _m.Mock.On("Joo", aParam, bParam, cParam), Parent: _m}
}

func (_m *CoconutMock) OnJooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *CoconutJooCall {
	return &CoconutJooCall{Call: _m.Mock.On("Joo", aParam, bParam, cParam), Parent: _m}
}

type CoconutJooCall struct {
	*mock.Call
	Parent *CoconutMock
}

func (_c *CoconutJooCall) Panic(msg string) *CoconutJooCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *CoconutJooCall) Once() *CoconutJooCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *CoconutJooCall) Twice() *CoconutJooCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *CoconutJooCall) Times(i int) *CoconutJooCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *CoconutJooCall) WaitUntil(w <-chan time.Time) *CoconutJooCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *CoconutJooCall) After(d time.Duration) *CoconutJooCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *CoconutJooCall) Run(fn func(args mock.Arguments)) *CoconutJooCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *CoconutJooCall) Maybe() *CoconutJooCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *CoconutJooCall) TypedReturns(a string, b int) *CoconutJooCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *CoconutJooCall) ReturnsFn(fn func(string, int, Water) (string, int)) *CoconutJooCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *CoconutJooCall) TypedRun(fn func(string, int, Water)) *CoconutJooCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_aParam := args.String(0)
		_bParam := args.Int(1)
		_cParam, _ := args.Get(2).(Water)
		fn(_aParam, _bParam, _cParam)
	})
	return _c
}

func (_c *CoconutJooCall) OnBoo(src *bytes.Buffer) *CoconutBooCall {
	return _c.Parent.OnBoo(src)
}

func (_c *CoconutJooCall) OnDoo(src time.Duration) *CoconutDooCall {
	return _c.Parent.OnDoo(src)
}

func (_c *CoconutJooCall) OnFoo(st Strawberry) *CoconutFooCall {
	return _c.Parent.OnFoo(st)
}

func (_c *CoconutJooCall) OnGoo(st string) *CoconutGooCall {
	return _c.Parent.OnGoo(st)
}

func (_c *CoconutJooCall) OnHoo(aParam string, bParam int, cParam Water) *CoconutHooCall {
	return _c.Parent.OnHoo(aParam, bParam, cParam)
}

func (_c *CoconutJooCall) OnJoo(aParam string, bParam int, cParam Water) *CoconutJooCall {
	return _c.Parent.OnJoo(aParam, bParam, cParam)
}

func (_c *CoconutJooCall) OnKoo(src string) *CoconutKooCall {
	return _c.Parent.OnKoo(src)
}

func (_c *CoconutJooCall) OnLoo(st string, values []int) *CoconutLooCall {
	return _c.Parent.OnLoo(st, values...)
}

func (_c *CoconutJooCall) OnMoo(fn func(Strawberry, Strawberry) Pineapple) *CoconutMooCall {
	return _c.Parent.OnMoo(fn)
}

func (_c *CoconutJooCall) OnToo(src string) *CoconutTooCall {
	return _c.Parent.OnToo(src)
}

func (_c *CoconutJooCall) OnVoo(src *module.Version) *CoconutVooCall {
	return _c.Parent.OnVoo(src)
}

func (_c *CoconutJooCall) OnYoo(st string) *CoconutYooCall {
	return _c.Parent.OnYoo(st)
}

func (_c *CoconutJooCall) OnZoo(st interface{}) *CoconutZooCall {
	return _c.Parent.OnZoo(st)
}

func (_c *CoconutJooCall) OnBooRaw(src interface{}) *CoconutBooCall {
	return _c.Parent.OnBooRaw(src)
}

func (_c *CoconutJooCall) OnDooRaw(src interface{}) *CoconutDooCall {
	return _c.Parent.OnDooRaw(src)
}

func (_c *CoconutJooCall) OnFooRaw(st interface{}) *CoconutFooCall {
	return _c.Parent.OnFooRaw(st)
}

func (_c *CoconutJooCall) OnGooRaw(st interface{}) *CoconutGooCall {
	return _c.Parent.OnGooRaw(st)
}

func (_c *CoconutJooCall) OnHooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *CoconutHooCall {
	return _c.Parent.OnHooRaw(aParam, bParam, cParam)
}

func (_c *CoconutJooCall) OnJooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *CoconutJooCall {
	return _c.Parent.OnJooRaw(aParam, bParam, cParam)
}

func (_c *CoconutJooCall) OnKooRaw(src interface{}) *CoconutKooCall {
	return _c.Parent.OnKooRaw(src)
}

func (_c *CoconutJooCall) OnLooRaw(st interface{}, values interface{}) *CoconutLooCall {
	return _c.Parent.OnLooRaw(st, values)
}

func (_c *CoconutJooCall) OnMooRaw(fn interface{}) *CoconutMooCall {
	return _c.Parent.OnMooRaw(fn)
}

func (_c *CoconutJooCall) OnTooRaw(src interface{}) *CoconutTooCall {
	return _c.Parent.OnTooRaw(src)
}

func (_c *CoconutJooCall) OnVooRaw(src interface{}) *CoconutVooCall {
	return _c.Parent.OnVooRaw(src)
}

func (_c *CoconutJooCall) OnYooRaw(st interface{}) *CoconutYooCall {
	return _c.Parent.OnYooRaw(st)
}

func (_c *CoconutJooCall) OnZooRaw(st interface{}) *CoconutZooCall {
	return _c.Parent.OnZooRaw(st)
}

func (_m *CoconutMock) Koo(src string) string {
	_ret := _m.Called(src)

	if _rf, ok := _ret.Get(0).(func(string) string); ok {
		return _rf(src)
	}

	dst := _ret.String(0)

	return dst
}

func (_m *CoconutMock) OnKoo(src string) *CoconutKooCall {
	return &CoconutKooCall{Call: _m.Mock.On("Koo", src), Parent: _m}
}

func (_m *CoconutMock) OnKooRaw(src interface{}) *CoconutKooCall {
	return &CoconutKooCall{Call: _m.Mock.On("Koo", src), Parent: _m}
}

type CoconutKooCall struct {
	*mock.Call
	Parent *CoconutMock
}

func (_c *CoconutKooCall) Panic(msg string) *CoconutKooCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *CoconutKooCall) Once() *CoconutKooCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *CoconutKooCall) Twice() *CoconutKooCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *CoconutKooCall) Times(i int) *CoconutKooCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *CoconutKooCall) WaitUntil(w <-chan time.Time) *CoconutKooCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *CoconutKooCall) After(d time.Duration) *CoconutKooCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *CoconutKooCall) Run(fn func(args mock.Arguments)) *CoconutKooCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *CoconutKooCall) Maybe() *CoconutKooCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *CoconutKooCall) TypedReturns(a string) *CoconutKooCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *CoconutKooCall) ReturnsFn(fn func(string) string) *CoconutKooCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *CoconutKooCall) TypedRun(fn func(string)) *CoconutKooCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_src := args.String(0)
		fn(_src)
	})
	return _c
}

func (_c *CoconutKooCall) OnBoo(src *bytes.Buffer) *CoconutBooCall {
	return _c.Parent.OnBoo(src)
}

func (_c *CoconutKooCall) OnDoo(src time.Duration) *CoconutDooCall {
	return _c.Parent.OnDoo(src)
}

func (_c *CoconutKooCall) OnFoo(st Strawberry) *CoconutFooCall {
	return _c.Parent.OnFoo(st)
}

func (_c *CoconutKooCall) OnGoo(st string) *CoconutGooCall {
	return _c.Parent.OnGoo(st)
}

func (_c *CoconutKooCall) OnHoo(aParam string, bParam int, cParam Water) *CoconutHooCall {
	return _c.Parent.OnHoo(aParam, bParam, cParam)
}

func (_c *CoconutKooCall) OnJoo(aParam string, bParam int, cParam Water) *CoconutJooCall {
	return _c.Parent.OnJoo(aParam, bParam, cParam)
}

func (_c *CoconutKooCall) OnKoo(src string) *CoconutKooCall {
	return _c.Parent.OnKoo(src)
}

func (_c *CoconutKooCall) OnLoo(st string, values []int) *CoconutLooCall {
	return _c.Parent.OnLoo(st, values...)
}

func (_c *CoconutKooCall) OnMoo(fn func(Strawberry, Strawberry) Pineapple) *CoconutMooCall {
	return _c.Parent.OnMoo(fn)
}

func (_c *CoconutKooCall) OnToo(src string) *CoconutTooCall {
	return _c.Parent.OnToo(src)
}

func (_c *CoconutKooCall) OnVoo(src *module.Version) *CoconutVooCall {
	return _c.Parent.OnVoo(src)
}

func (_c *CoconutKooCall) OnYoo(st string) *CoconutYooCall {
	return _c.Parent.OnYoo(st)
}

func (_c *CoconutKooCall) OnZoo(st interface{}) *CoconutZooCall {
	return _c.Parent.OnZoo(st)
}

func (_c *CoconutKooCall) OnBooRaw(src interface{}) *CoconutBooCall {
	return _c.Parent.OnBooRaw(src)
}

func (_c *CoconutKooCall) OnDooRaw(src interface{}) *CoconutDooCall {
	return _c.Parent.OnDooRaw(src)
}

func (_c *CoconutKooCall) OnFooRaw(st interface{}) *CoconutFooCall {
	return _c.Parent.OnFooRaw(st)
}

func (_c *CoconutKooCall) OnGooRaw(st interface{}) *CoconutGooCall {
	return _c.Parent.OnGooRaw(st)
}

func (_c *CoconutKooCall) OnHooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *CoconutHooCall {
	return _c.Parent.OnHooRaw(aParam, bParam, cParam)
}

func (_c *CoconutKooCall) OnJooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *CoconutJooCall {
	return _c.Parent.OnJooRaw(aParam, bParam, cParam)
}

func (_c *CoconutKooCall) OnKooRaw(src interface{}) *CoconutKooCall {
	return _c.Parent.OnKooRaw(src)
}

func (_c *CoconutKooCall) OnLooRaw(st interface{}, values interface{}) *CoconutLooCall {
	return _c.Parent.OnLooRaw(st, values)
}

func (_c *CoconutKooCall) OnMooRaw(fn interface{}) *CoconutMooCall {
	return _c.Parent.OnMooRaw(fn)
}

func (_c *CoconutKooCall) OnTooRaw(src interface{}) *CoconutTooCall {
	return _c.Parent.OnTooRaw(src)
}

func (_c *CoconutKooCall) OnVooRaw(src interface{}) *CoconutVooCall {
	return _c.Parent.OnVooRaw(src)
}

func (_c *CoconutKooCall) OnYooRaw(st interface{}) *CoconutYooCall {
	return _c.Parent.OnYooRaw(st)
}

func (_c *CoconutKooCall) OnZooRaw(st interface{}) *CoconutZooCall {
	return _c.Parent.OnZooRaw(st)
}

func (_m *CoconutMock) Loo(st string, values ...int) string {
	_ret := _m.Called(st, values)

	if _rf, ok := _ret.Get(0).(func(string, ...int) string); ok {
		return _rf(st, values...)
	}

	_ra0 := _ret.String(0)

	return _ra0
}

func (_m *CoconutMock) OnLoo(st string, values ...int) *CoconutLooCall {
	return &CoconutLooCall{Call: _m.Mock.On("Loo", st, values), Parent: _m}
}

func (_m *CoconutMock) OnLooRaw(st interface{}, values interface{}) *CoconutLooCall {
	return &CoconutLooCall{Call: _m.Mock.On("Loo", st, values), Parent: _m}
}

type CoconutLooCall struct {
	*mock.Call
	Parent *CoconutMock
}

func (_c *CoconutLooCall) Panic(msg string) *CoconutLooCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *CoconutLooCall) Once() *CoconutLooCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *CoconutLooCall) Twice() *CoconutLooCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *CoconutLooCall) Times(i int) *CoconutLooCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *CoconutLooCall) WaitUntil(w <-chan time.Time) *CoconutLooCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *CoconutLooCall) After(d time.Duration) *CoconutLooCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *CoconutLooCall) Run(fn func(args mock.Arguments)) *CoconutLooCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *CoconutLooCall) Maybe() *CoconutLooCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *CoconutLooCall) TypedReturns(a string) *CoconutLooCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *CoconutLooCall) ReturnsFn(fn func(string, ...int) string) *CoconutLooCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *CoconutLooCall) TypedRun(fn func(string, ...int)) *CoconutLooCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_st := args.String(0)
		_values, _ := args.Get(1).([]int)
		fn(_st, _values...)
	})
	return _c
}

func (_c *CoconutLooCall) OnBoo(src *bytes.Buffer) *CoconutBooCall {
	return _c.Parent.OnBoo(src)
}

func (_c *CoconutLooCall) OnDoo(src time.Duration) *CoconutDooCall {
	return _c.Parent.OnDoo(src)
}

func (_c *CoconutLooCall) OnFoo(st Strawberry) *CoconutFooCall {
	return _c.Parent.OnFoo(st)
}

func (_c *CoconutLooCall) OnGoo(st string) *CoconutGooCall {
	return _c.Parent.OnGoo(st)
}

func (_c *CoconutLooCall) OnHoo(aParam string, bParam int, cParam Water) *CoconutHooCall {
	return _c.Parent.OnHoo(aParam, bParam, cParam)
}

func (_c *CoconutLooCall) OnJoo(aParam string, bParam int, cParam Water) *CoconutJooCall {
	return _c.Parent.OnJoo(aParam, bParam, cParam)
}

func (_c *CoconutLooCall) OnKoo(src string) *CoconutKooCall {
	return _c.Parent.OnKoo(src)
}

func (_c *CoconutLooCall) OnLoo(st string, values ...int) *CoconutLooCall {
	return _c.Parent.OnLoo(st, values...)
}

func (_c *CoconutLooCall) OnMoo(fn func(Strawberry, Strawberry) Pineapple) *CoconutMooCall {
	return _c.Parent.OnMoo(fn)
}

func (_c *CoconutLooCall) OnToo(src string) *CoconutTooCall {
	return _c.Parent.OnToo(src)
}

func (_c *CoconutLooCall) OnVoo(src *module.Version) *CoconutVooCall {
	return _c.Parent.OnVoo(src)
}

func (_c *CoconutLooCall) OnYoo(st string) *CoconutYooCall {
	return _c.Parent.OnYoo(st)
}

func (_c *CoconutLooCall) OnZoo(st interface{}) *CoconutZooCall {
	return _c.Parent.OnZoo(st)
}

func (_c *CoconutLooCall) OnBooRaw(src interface{}) *CoconutBooCall {
	return _c.Parent.OnBooRaw(src)
}

func (_c *CoconutLooCall) OnDooRaw(src interface{}) *CoconutDooCall {
	return _c.Parent.OnDooRaw(src)
}

func (_c *CoconutLooCall) OnFooRaw(st interface{}) *CoconutFooCall {
	return _c.Parent.OnFooRaw(st)
}

func (_c *CoconutLooCall) OnGooRaw(st interface{}) *CoconutGooCall {
	return _c.Parent.OnGooRaw(st)
}

func (_c *CoconutLooCall) OnHooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *CoconutHooCall {
	return _c.Parent.OnHooRaw(aParam, bParam, cParam)
}

func (_c *CoconutLooCall) OnJooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *CoconutJooCall {
	return _c.Parent.OnJooRaw(aParam, bParam, cParam)
}

func (_c *CoconutLooCall) OnKooRaw(src interface{}) *CoconutKooCall {
	return _c.Parent.OnKooRaw(src)
}

func (_c *CoconutLooCall) OnLooRaw(st interface{}, values interface{}) *CoconutLooCall {
	return _c.Parent.OnLooRaw(st, values)
}

func (_c *CoconutLooCall) OnMooRaw(fn interface{}) *CoconutMooCall {
	return _c.Parent.OnMooRaw(fn)
}

func (_c *CoconutLooCall) OnTooRaw(src interface{}) *CoconutTooCall {
	return _c.Parent.OnTooRaw(src)
}

func (_c *CoconutLooCall) OnVooRaw(src interface{}) *CoconutVooCall {
	return _c.Parent.OnVooRaw(src)
}

func (_c *CoconutLooCall) OnYooRaw(st interface{}) *CoconutYooCall {
	return _c.Parent.OnYooRaw(st)
}

func (_c *CoconutLooCall) OnZooRaw(st interface{}) *CoconutZooCall {
	return _c.Parent.OnZooRaw(st)
}

func (_m *CoconutMock) Moo(fn func(Strawberry, Strawberry) Pineapple) string {
	_ret := _m.Called(fn)

	if _rf, ok := _ret.Get(0).(func(func(Strawberry, Strawberry) Pineapple) string); ok {
		return _rf(fn)
	}

	_ra0 := _ret.String(0)

	return _ra0
}

func (_m *CoconutMock) OnMoo(fn func(Strawberry, Strawberry) Pineapple) *CoconutMooCall {
	return &CoconutMooCall{Call: _m.Mock.On("Moo", mock.Anything), Parent: _m}
}

func (_m *CoconutMock) OnMooRaw(fn interface{}) *CoconutMooCall {
	return &CoconutMooCall{Call: _m.Mock.On("Moo", mock.Anything), Parent: _m}
}

type CoconutMooCall struct {
	*mock.Call
	Parent *CoconutMock
}

func (_c *CoconutMooCall) Panic(msg string) *CoconutMooCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *CoconutMooCall) Once() *CoconutMooCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *CoconutMooCall) Twice() *CoconutMooCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *CoconutMooCall) Times(i int) *CoconutMooCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *CoconutMooCall) WaitUntil(w <-chan time.Time) *CoconutMooCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *CoconutMooCall) After(d time.Duration) *CoconutMooCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *CoconutMooCall) Run(fn func(args mock.Arguments)) *CoconutMooCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *CoconutMooCall) Maybe() *CoconutMooCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *CoconutMooCall) TypedReturns(a string) *CoconutMooCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *CoconutMooCall) ReturnsFn(fn func(func(Strawberry, Strawberry) Pineapple) string) *CoconutMooCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *CoconutMooCall) TypedRun(fn func(func(Strawberry, Strawberry) Pineapple)) *CoconutMooCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_fn, _ := args.Get(0).(func(Strawberry, Strawberry) Pineapple)
		fn(_fn)
	})
	return _c
}

func (_c *CoconutMooCall) OnBoo(src *bytes.Buffer) *CoconutBooCall {
	return _c.Parent.OnBoo(src)
}

func (_c *CoconutMooCall) OnDoo(src time.Duration) *CoconutDooCall {
	return _c.Parent.OnDoo(src)
}

func (_c *CoconutMooCall) OnFoo(st Strawberry) *CoconutFooCall {
	return _c.Parent.OnFoo(st)
}

func (_c *CoconutMooCall) OnGoo(st string) *CoconutGooCall {
	return _c.Parent.OnGoo(st)
}

func (_c *CoconutMooCall) OnHoo(aParam string, bParam int, cParam Water) *CoconutHooCall {
	return _c.Parent.OnHoo(aParam, bParam, cParam)
}

func (_c *CoconutMooCall) OnJoo(aParam string, bParam int, cParam Water) *CoconutJooCall {
	return _c.Parent.OnJoo(aParam, bParam, cParam)
}

func (_c *CoconutMooCall) OnKoo(src string) *CoconutKooCall {
	return _c.Parent.OnKoo(src)
}

func (_c *CoconutMooCall) OnLoo(st string, values []int) *CoconutLooCall {
	return _c.Parent.OnLoo(st, values...)
}

func (_c *CoconutMooCall) OnMoo(fn func(Strawberry, Strawberry) Pineapple) *CoconutMooCall {
	return _c.Parent.OnMoo(fn)
}

func (_c *CoconutMooCall) OnToo(src string) *CoconutTooCall {
	return _c.Parent.OnToo(src)
}

func (_c *CoconutMooCall) OnVoo(src *module.Version) *CoconutVooCall {
	return _c.Parent.OnVoo(src)
}

func (_c *CoconutMooCall) OnYoo(st string) *CoconutYooCall {
	return _c.Parent.OnYoo(st)
}

func (_c *CoconutMooCall) OnZoo(st interface{}) *CoconutZooCall {
	return _c.Parent.OnZoo(st)
}

func (_c *CoconutMooCall) OnBooRaw(src interface{}) *CoconutBooCall {
	return _c.Parent.OnBooRaw(src)
}

func (_c *CoconutMooCall) OnDooRaw(src interface{}) *CoconutDooCall {
	return _c.Parent.OnDooRaw(src)
}

func (_c *CoconutMooCall) OnFooRaw(st interface{}) *CoconutFooCall {
	return _c.Parent.OnFooRaw(st)
}

func (_c *CoconutMooCall) OnGooRaw(st interface{}) *CoconutGooCall {
	return _c.Parent.OnGooRaw(st)
}

func (_c *CoconutMooCall) OnHooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *CoconutHooCall {
	return _c.Parent.OnHooRaw(aParam, bParam, cParam)
}

func (_c *CoconutMooCall) OnJooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *CoconutJooCall {
	return _c.Parent.OnJooRaw(aParam, bParam, cParam)
}

func (_c *CoconutMooCall) OnKooRaw(src interface{}) *CoconutKooCall {
	return _c.Parent.OnKooRaw(src)
}

func (_c *CoconutMooCall) OnLooRaw(st interface{}, values interface{}) *CoconutLooCall {
	return _c.Parent.OnLooRaw(st, values)
}

func (_c *CoconutMooCall) OnMooRaw(fn interface{}) *CoconutMooCall {
	return _c.Parent.OnMooRaw(fn)
}

func (_c *CoconutMooCall) OnTooRaw(src interface{}) *CoconutTooCall {
	return _c.Parent.OnTooRaw(src)
}

func (_c *CoconutMooCall) OnVooRaw(src interface{}) *CoconutVooCall {
	return _c.Parent.OnVooRaw(src)
}

func (_c *CoconutMooCall) OnYooRaw(st interface{}) *CoconutYooCall {
	return _c.Parent.OnYooRaw(st)
}

func (_c *CoconutMooCall) OnZooRaw(st interface{}) *CoconutZooCall {
	return _c.Parent.OnZooRaw(st)
}

func (_m *CoconutMock) Too(src string) time.Duration {
	_ret := _m.Called(src)

	if _rf, ok := _ret.Get(0).(func(string) time.Duration); ok {
		return _rf(src)
	}

	_ra0, _ := _ret.Get(0).(time.Duration)

	return _ra0
}

func (_m *CoconutMock) OnToo(src string) *CoconutTooCall {
	return &CoconutTooCall{Call: _m.Mock.On("Too", src), Parent: _m}
}

func (_m *CoconutMock) OnTooRaw(src interface{}) *CoconutTooCall {
	return &CoconutTooCall{Call: _m.Mock.On("Too", src), Parent: _m}
}

type CoconutTooCall struct {
	*mock.Call
	Parent *CoconutMock
}

func (_c *CoconutTooCall) Panic(msg string) *CoconutTooCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *CoconutTooCall) Once() *CoconutTooCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *CoconutTooCall) Twice() *CoconutTooCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *CoconutTooCall) Times(i int) *CoconutTooCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *CoconutTooCall) WaitUntil(w <-chan time.Time) *CoconutTooCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *CoconutTooCall) After(d time.Duration) *CoconutTooCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *CoconutTooCall) Run(fn func(args mock.Arguments)) *CoconutTooCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *CoconutTooCall) Maybe() *CoconutTooCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *CoconutTooCall) TypedReturns(a time.Duration) *CoconutTooCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *CoconutTooCall) ReturnsFn(fn func(string) time.Duration) *CoconutTooCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *CoconutTooCall) TypedRun(fn func(string)) *CoconutTooCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_src := args.String(0)
		fn(_src)
	})
	return _c
}

func (_c *CoconutTooCall) OnBoo(src *bytes.Buffer) *CoconutBooCall {
	return _c.Parent.OnBoo(src)
}

func (_c *CoconutTooCall) OnDoo(src time.Duration) *CoconutDooCall {
	return _c.Parent.OnDoo(src)
}

func (_c *CoconutTooCall) OnFoo(st Strawberry) *CoconutFooCall {
	return _c.Parent.OnFoo(st)
}

func (_c *CoconutTooCall) OnGoo(st string) *CoconutGooCall {
	return _c.Parent.OnGoo(st)
}

func (_c *CoconutTooCall) OnHoo(aParam string, bParam int, cParam Water) *CoconutHooCall {
	return _c.Parent.OnHoo(aParam, bParam, cParam)
}

func (_c *CoconutTooCall) OnJoo(aParam string, bParam int, cParam Water) *CoconutJooCall {
	return _c.Parent.OnJoo(aParam, bParam, cParam)
}

func (_c *CoconutTooCall) OnKoo(src string) *CoconutKooCall {
	return _c.Parent.OnKoo(src)
}

func (_c *CoconutTooCall) OnLoo(st string, values []int) *CoconutLooCall {
	return _c.Parent.OnLoo(st, values...)
}

func (_c *CoconutTooCall) OnMoo(fn func(Strawberry, Strawberry) Pineapple) *CoconutMooCall {
	return _c.Parent.OnMoo(fn)
}

func (_c *CoconutTooCall) OnToo(src string) *CoconutTooCall {
	return _c.Parent.OnToo(src)
}

func (_c *CoconutTooCall) OnVoo(src *module.Version) *CoconutVooCall {
	return _c.Parent.OnVoo(src)
}

func (_c *CoconutTooCall) OnYoo(st string) *CoconutYooCall {
	return _c.Parent.OnYoo(st)
}

func (_c *CoconutTooCall) OnZoo(st interface{}) *CoconutZooCall {
	return _c.Parent.OnZoo(st)
}

func (_c *CoconutTooCall) OnBooRaw(src interface{}) *CoconutBooCall {
	return _c.Parent.OnBooRaw(src)
}

func (_c *CoconutTooCall) OnDooRaw(src interface{}) *CoconutDooCall {
	return _c.Parent.OnDooRaw(src)
}

func (_c *CoconutTooCall) OnFooRaw(st interface{}) *CoconutFooCall {
	return _c.Parent.OnFooRaw(st)
}

func (_c *CoconutTooCall) OnGooRaw(st interface{}) *CoconutGooCall {
	return _c.Parent.OnGooRaw(st)
}

func (_c *CoconutTooCall) OnHooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *CoconutHooCall {
	return _c.Parent.OnHooRaw(aParam, bParam, cParam)
}

func (_c *CoconutTooCall) OnJooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *CoconutJooCall {
	return _c.Parent.OnJooRaw(aParam, bParam, cParam)
}

func (_c *CoconutTooCall) OnKooRaw(src interface{}) *CoconutKooCall {
	return _c.Parent.OnKooRaw(src)
}

func (_c *CoconutTooCall) OnLooRaw(st interface{}, values interface{}) *CoconutLooCall {
	return _c.Parent.OnLooRaw(st, values)
}

func (_c *CoconutTooCall) OnMooRaw(fn interface{}) *CoconutMooCall {
	return _c.Parent.OnMooRaw(fn)
}

func (_c *CoconutTooCall) OnTooRaw(src interface{}) *CoconutTooCall {
	return _c.Parent.OnTooRaw(src)
}

func (_c *CoconutTooCall) OnVooRaw(src interface{}) *CoconutVooCall {
	return _c.Parent.OnVooRaw(src)
}

func (_c *CoconutTooCall) OnYooRaw(st interface{}) *CoconutYooCall {
	return _c.Parent.OnYooRaw(st)
}

func (_c *CoconutTooCall) OnZooRaw(st interface{}) *CoconutZooCall {
	return _c.Parent.OnZooRaw(st)
}

func (_m *CoconutMock) Voo(src *module.Version) time.Duration {
	_ret := _m.Called(src)

	if _rf, ok := _ret.Get(0).(func(*module.Version) time.Duration); ok {
		return _rf(src)
	}

	_ra0, _ := _ret.Get(0).(time.Duration)

	return _ra0
}

func (_m *CoconutMock) OnVoo(src *module.Version) *CoconutVooCall {
	return &CoconutVooCall{Call: _m.Mock.On("Voo", src), Parent: _m}
}

func (_m *CoconutMock) OnVooRaw(src interface{}) *CoconutVooCall {
	return &CoconutVooCall{Call: _m.Mock.On("Voo", src), Parent: _m}
}

type CoconutVooCall struct {
	*mock.Call
	Parent *CoconutMock
}

func (_c *CoconutVooCall) Panic(msg string) *CoconutVooCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *CoconutVooCall) Once() *CoconutVooCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *CoconutVooCall) Twice() *CoconutVooCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *CoconutVooCall) Times(i int) *CoconutVooCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *CoconutVooCall) WaitUntil(w <-chan time.Time) *CoconutVooCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *CoconutVooCall) After(d time.Duration) *CoconutVooCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *CoconutVooCall) Run(fn func(args mock.Arguments)) *CoconutVooCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *CoconutVooCall) Maybe() *CoconutVooCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *CoconutVooCall) TypedReturns(a time.Duration) *CoconutVooCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *CoconutVooCall) ReturnsFn(fn func(*module.Version) time.Duration) *CoconutVooCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *CoconutVooCall) TypedRun(fn func(*module.Version)) *CoconutVooCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_src, _ := args.Get(0).(*module.Version)
		fn(_src)
	})
	return _c
}

func (_c *CoconutVooCall) OnBoo(src *bytes.Buffer) *CoconutBooCall {
	return _c.Parent.OnBoo(src)
}

func (_c *CoconutVooCall) OnDoo(src time.Duration) *CoconutDooCall {
	return _c.Parent.OnDoo(src)
}

func (_c *CoconutVooCall) OnFoo(st Strawberry) *CoconutFooCall {
	return _c.Parent.OnFoo(st)
}

func (_c *CoconutVooCall) OnGoo(st string) *CoconutGooCall {
	return _c.Parent.OnGoo(st)
}

func (_c *CoconutVooCall) OnHoo(aParam string, bParam int, cParam Water) *CoconutHooCall {
	return _c.Parent.OnHoo(aParam, bParam, cParam)
}

func (_c *CoconutVooCall) OnJoo(aParam string, bParam int, cParam Water) *CoconutJooCall {
	return _c.Parent.OnJoo(aParam, bParam, cParam)
}

func (_c *CoconutVooCall) OnKoo(src string) *CoconutKooCall {
	return _c.Parent.OnKoo(src)
}

func (_c *CoconutVooCall) OnLoo(st string, values []int) *CoconutLooCall {
	return _c.Parent.OnLoo(st, values...)
}

func (_c *CoconutVooCall) OnMoo(fn func(Strawberry, Strawberry) Pineapple) *CoconutMooCall {
	return _c.Parent.OnMoo(fn)
}

func (_c *CoconutVooCall) OnToo(src string) *CoconutTooCall {
	return _c.Parent.OnToo(src)
}

func (_c *CoconutVooCall) OnVoo(src *module.Version) *CoconutVooCall {
	return _c.Parent.OnVoo(src)
}

func (_c *CoconutVooCall) OnYoo(st string) *CoconutYooCall {
	return _c.Parent.OnYoo(st)
}

func (_c *CoconutVooCall) OnZoo(st interface{}) *CoconutZooCall {
	return _c.Parent.OnZoo(st)
}

func (_c *CoconutVooCall) OnBooRaw(src interface{}) *CoconutBooCall {
	return _c.Parent.OnBooRaw(src)
}

func (_c *CoconutVooCall) OnDooRaw(src interface{}) *CoconutDooCall {
	return _c.Parent.OnDooRaw(src)
}

func (_c *CoconutVooCall) OnFooRaw(st interface{}) *CoconutFooCall {
	return _c.Parent.OnFooRaw(st)
}

func (_c *CoconutVooCall) OnGooRaw(st interface{}) *CoconutGooCall {
	return _c.Parent.OnGooRaw(st)
}

func (_c *CoconutVooCall) OnHooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *CoconutHooCall {
	return _c.Parent.OnHooRaw(aParam, bParam, cParam)
}

func (_c *CoconutVooCall) OnJooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *CoconutJooCall {
	return _c.Parent.OnJooRaw(aParam, bParam, cParam)
}

func (_c *CoconutVooCall) OnKooRaw(src interface{}) *CoconutKooCall {
	return _c.Parent.OnKooRaw(src)
}

func (_c *CoconutVooCall) OnLooRaw(st interface{}, values interface{}) *CoconutLooCall {
	return _c.Parent.OnLooRaw(st, values)
}

func (_c *CoconutVooCall) OnMooRaw(fn interface{}) *CoconutMooCall {
	return _c.Parent.OnMooRaw(fn)
}

func (_c *CoconutVooCall) OnTooRaw(src interface{}) *CoconutTooCall {
	return _c.Parent.OnTooRaw(src)
}

func (_c *CoconutVooCall) OnVooRaw(src interface{}) *CoconutVooCall {
	return _c.Parent.OnVooRaw(src)
}

func (_c *CoconutVooCall) OnYooRaw(st interface{}) *CoconutYooCall {
	return _c.Parent.OnYooRaw(st)
}

func (_c *CoconutVooCall) OnZooRaw(st interface{}) *CoconutZooCall {
	return _c.Parent.OnZooRaw(st)
}

func (_m *CoconutMock) Yoo(st string) interface{} {
	_ret := _m.Called(st)

	if _rf, ok := _ret.Get(0).(func(string) interface{}); ok {
		return _rf(st)
	}

	_ra0, _ := _ret.Get(0).(interface{})

	return _ra0
}

func (_m *CoconutMock) OnYoo(st string) *CoconutYooCall {
	return &CoconutYooCall{Call: _m.Mock.On("Yoo", st), Parent: _m}
}

func (_m *CoconutMock) OnYooRaw(st interface{}) *CoconutYooCall {
	return &CoconutYooCall{Call: _m.Mock.On("Yoo", st), Parent: _m}
}

type CoconutYooCall struct {
	*mock.Call
	Parent *CoconutMock
}

func (_c *CoconutYooCall) Panic(msg string) *CoconutYooCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *CoconutYooCall) Once() *CoconutYooCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *CoconutYooCall) Twice() *CoconutYooCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *CoconutYooCall) Times(i int) *CoconutYooCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *CoconutYooCall) WaitUntil(w <-chan time.Time) *CoconutYooCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *CoconutYooCall) After(d time.Duration) *CoconutYooCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *CoconutYooCall) Run(fn func(args mock.Arguments)) *CoconutYooCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *CoconutYooCall) Maybe() *CoconutYooCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *CoconutYooCall) TypedReturns(a interface{}) *CoconutYooCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *CoconutYooCall) ReturnsFn(fn func(string) interface{}) *CoconutYooCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *CoconutYooCall) TypedRun(fn func(string)) *CoconutYooCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_st := args.String(0)
		fn(_st)
	})
	return _c
}

func (_c *CoconutYooCall) OnBoo(src *bytes.Buffer) *CoconutBooCall {
	return _c.Parent.OnBoo(src)
}

func (_c *CoconutYooCall) OnDoo(src time.Duration) *CoconutDooCall {
	return _c.Parent.OnDoo(src)
}

func (_c *CoconutYooCall) OnFoo(st Strawberry) *CoconutFooCall {
	return _c.Parent.OnFoo(st)
}

func (_c *CoconutYooCall) OnGoo(st string) *CoconutGooCall {
	return _c.Parent.OnGoo(st)
}

func (_c *CoconutYooCall) OnHoo(aParam string, bParam int, cParam Water) *CoconutHooCall {
	return _c.Parent.OnHoo(aParam, bParam, cParam)
}

func (_c *CoconutYooCall) OnJoo(aParam string, bParam int, cParam Water) *CoconutJooCall {
	return _c.Parent.OnJoo(aParam, bParam, cParam)
}

func (_c *CoconutYooCall) OnKoo(src string) *CoconutKooCall {
	return _c.Parent.OnKoo(src)
}

func (_c *CoconutYooCall) OnLoo(st string, values []int) *CoconutLooCall {
	return _c.Parent.OnLoo(st, values...)
}

func (_c *CoconutYooCall) OnMoo(fn func(Strawberry, Strawberry) Pineapple) *CoconutMooCall {
	return _c.Parent.OnMoo(fn)
}

func (_c *CoconutYooCall) OnToo(src string) *CoconutTooCall {
	return _c.Parent.OnToo(src)
}

func (_c *CoconutYooCall) OnVoo(src *module.Version) *CoconutVooCall {
	return _c.Parent.OnVoo(src)
}

func (_c *CoconutYooCall) OnYoo(st string) *CoconutYooCall {
	return _c.Parent.OnYoo(st)
}

func (_c *CoconutYooCall) OnZoo(st interface{}) *CoconutZooCall {
	return _c.Parent.OnZoo(st)
}

func (_c *CoconutYooCall) OnBooRaw(src interface{}) *CoconutBooCall {
	return _c.Parent.OnBooRaw(src)
}

func (_c *CoconutYooCall) OnDooRaw(src interface{}) *CoconutDooCall {
	return _c.Parent.OnDooRaw(src)
}

func (_c *CoconutYooCall) OnFooRaw(st interface{}) *CoconutFooCall {
	return _c.Parent.OnFooRaw(st)
}

func (_c *CoconutYooCall) OnGooRaw(st interface{}) *CoconutGooCall {
	return _c.Parent.OnGooRaw(st)
}

func (_c *CoconutYooCall) OnHooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *CoconutHooCall {
	return _c.Parent.OnHooRaw(aParam, bParam, cParam)
}

func (_c *CoconutYooCall) OnJooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *CoconutJooCall {
	return _c.Parent.OnJooRaw(aParam, bParam, cParam)
}

func (_c *CoconutYooCall) OnKooRaw(src interface{}) *CoconutKooCall {
	return _c.Parent.OnKooRaw(src)
}

func (_c *CoconutYooCall) OnLooRaw(st interface{}, values interface{}) *CoconutLooCall {
	return _c.Parent.OnLooRaw(st, values)
}

func (_c *CoconutYooCall) OnMooRaw(fn interface{}) *CoconutMooCall {
	return _c.Parent.OnMooRaw(fn)
}

func (_c *CoconutYooCall) OnTooRaw(src interface{}) *CoconutTooCall {
	return _c.Parent.OnTooRaw(src)
}

func (_c *CoconutYooCall) OnVooRaw(src interface{}) *CoconutVooCall {
	return _c.Parent.OnVooRaw(src)
}

func (_c *CoconutYooCall) OnYooRaw(st interface{}) *CoconutYooCall {
	return _c.Parent.OnYooRaw(st)
}

func (_c *CoconutYooCall) OnZooRaw(st interface{}) *CoconutZooCall {
	return _c.Parent.OnZooRaw(st)
}

func (_m *CoconutMock) Zoo(st interface{}) string {
	_ret := _m.Called(st)

	if _rf, ok := _ret.Get(0).(func(interface{}) string); ok {
		return _rf(st)
	}

	_ra0 := _ret.String(0)

	return _ra0
}

func (_m *CoconutMock) OnZoo(st interface{}) *CoconutZooCall {
	return &CoconutZooCall{Call: _m.Mock.On("Zoo", st), Parent: _m}
}

func (_m *CoconutMock) OnZooRaw(st interface{}) *CoconutZooCall {
	return &CoconutZooCall{Call: _m.Mock.On("Zoo", st), Parent: _m}
}

type CoconutZooCall struct {
	*mock.Call
	Parent *CoconutMock
}

func (_c *CoconutZooCall) Panic(msg string) *CoconutZooCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *CoconutZooCall) Once() *CoconutZooCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *CoconutZooCall) Twice() *CoconutZooCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *CoconutZooCall) Times(i int) *CoconutZooCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *CoconutZooCall) WaitUntil(w <-chan time.Time) *CoconutZooCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *CoconutZooCall) After(d time.Duration) *CoconutZooCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *CoconutZooCall) Run(fn func(args mock.Arguments)) *CoconutZooCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *CoconutZooCall) Maybe() *CoconutZooCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *CoconutZooCall) TypedReturns(a string) *CoconutZooCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *CoconutZooCall) ReturnsFn(fn func(interface{}) string) *CoconutZooCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *CoconutZooCall) TypedRun(fn func(interface{})) *CoconutZooCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_st, _ := args.Get(0).(interface{})
		fn(_st)
	})
	return _c
}

func (_c *CoconutZooCall) OnBoo(src *bytes.Buffer) *CoconutBooCall {
	return _c.Parent.OnBoo(src)
}

func (_c *CoconutZooCall) OnDoo(src time.Duration) *CoconutDooCall {
	return _c.Parent.OnDoo(src)
}

func (_c *CoconutZooCall) OnFoo(st Strawberry) *CoconutFooCall {
	return _c.Parent.OnFoo(st)
}

func (_c *CoconutZooCall) OnGoo(st string) *CoconutGooCall {
	return _c.Parent.OnGoo(st)
}

func (_c *CoconutZooCall) OnHoo(aParam string, bParam int, cParam Water) *CoconutHooCall {
	return _c.Parent.OnHoo(aParam, bParam, cParam)
}

func (_c *CoconutZooCall) OnJoo(aParam string, bParam int, cParam Water) *CoconutJooCall {
	return _c.Parent.OnJoo(aParam, bParam, cParam)
}

func (_c *CoconutZooCall) OnKoo(src string) *CoconutKooCall {
	return _c.Parent.OnKoo(src)
}

func (_c *CoconutZooCall) OnLoo(st string, values []int) *CoconutLooCall {
	return _c.Parent.OnLoo(st, values...)
}

func (_c *CoconutZooCall) OnMoo(fn func(Strawberry, Strawberry) Pineapple) *CoconutMooCall {
	return _c.Parent.OnMoo(fn)
}

func (_c *CoconutZooCall) OnToo(src string) *CoconutTooCall {
	return _c.Parent.OnToo(src)
}

func (_c *CoconutZooCall) OnVoo(src *module.Version) *CoconutVooCall {
	return _c.Parent.OnVoo(src)
}

func (_c *CoconutZooCall) OnYoo(st string) *CoconutYooCall {
	return _c.Parent.OnYoo(st)
}

func (_c *CoconutZooCall) OnZoo(st interface{}) *CoconutZooCall {
	return _c.Parent.OnZoo(st)
}

func (_c *CoconutZooCall) OnBooRaw(src interface{}) *CoconutBooCall {
	return _c.Parent.OnBooRaw(src)
}

func (_c *CoconutZooCall) OnDooRaw(src interface{}) *CoconutDooCall {
	return _c.Parent.OnDooRaw(src)
}

func (_c *CoconutZooCall) OnFooRaw(st interface{}) *CoconutFooCall {
	return _c.Parent.OnFooRaw(st)
}

func (_c *CoconutZooCall) OnGooRaw(st interface{}) *CoconutGooCall {
	return _c.Parent.OnGooRaw(st)
}

func (_c *CoconutZooCall) OnHooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *CoconutHooCall {
	return _c.Parent.OnHooRaw(aParam, bParam, cParam)
}

func (_c *CoconutZooCall) OnJooRaw(aParam interface{}, bParam interface{}, cParam interface{}) *CoconutJooCall {
	return _c.Parent.OnJooRaw(aParam, bParam, cParam)
}

func (_c *CoconutZooCall) OnKooRaw(src interface{}) *CoconutKooCall {
	return _c.Parent.OnKooRaw(src)
}

func (_c *CoconutZooCall) OnLooRaw(st interface{}, values interface{}) *CoconutLooCall {
	return _c.Parent.OnLooRaw(st, values)
}

func (_c *CoconutZooCall) OnMooRaw(fn interface{}) *CoconutMooCall {
	return _c.Parent.OnMooRaw(fn)
}

func (_c *CoconutZooCall) OnTooRaw(src interface{}) *CoconutTooCall {
	return _c.Parent.OnTooRaw(src)
}

func (_c *CoconutZooCall) OnVooRaw(src interface{}) *CoconutVooCall {
	return _c.Parent.OnVooRaw(src)
}

func (_c *CoconutZooCall) OnYooRaw(st interface{}) *CoconutYooCall {
	return _c.Parent.OnYooRaw(st)
}

func (_c *CoconutZooCall) OnZooRaw(st interface{}) *CoconutZooCall {
	return _c.Parent.OnZooRaw(st)
}

// CarrotMock mock of Carrot.
type CarrotMock struct{ mock.Mock }

// NewCarrotMock creates a new CarrotMock.
func NewCarrotMock(tb testing.TB) *CarrotMock {
	tb.Helper()

	m := &CarrotMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *CarrotMock) Bar(aParam string) *b.Potato {
	_ret := _m.Called(aParam)

	if _rf, ok := _ret.Get(0).(func(string) *b.Potato); ok {
		return _rf(aParam)
	}

	_ra0, _ := _ret.Get(0).(*b.Potato)

	return _ra0
}

func (_m *CarrotMock) OnBar(aParam string) *CarrotBarCall {
	return &CarrotBarCall{Call: _m.Mock.On("Bar", aParam), Parent: _m}
}

func (_m *CarrotMock) OnBarRaw(aParam interface{}) *CarrotBarCall {
	return &CarrotBarCall{Call: _m.Mock.On("Bar", aParam), Parent: _m}
}

type CarrotBarCall struct {
	*mock.Call
	Parent *CarrotMock
}

func (_c *CarrotBarCall) Panic(msg string) *CarrotBarCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *CarrotBarCall) Once() *CarrotBarCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *CarrotBarCall) Twice() *CarrotBarCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *CarrotBarCall) Times(i int) *CarrotBarCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *CarrotBarCall) WaitUntil(w <-chan time.Time) *CarrotBarCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *CarrotBarCall) After(d time.Duration) *CarrotBarCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *CarrotBarCall) Run(fn func(args mock.Arguments)) *CarrotBarCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *CarrotBarCall) Maybe() *CarrotBarCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *CarrotBarCall) TypedReturns(a *b.Potato) *CarrotBarCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *CarrotBarCall) ReturnsFn(fn func(string) *b.Potato) *CarrotBarCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *CarrotBarCall) TypedRun(fn func(string)) *CarrotBarCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_aParam := args.String(0)
		fn(_aParam)
	})
	return _c
}

func (_c *CarrotBarCall) OnBar(aParam string) *CarrotBarCall {
	return _c.Parent.OnBar(aParam)
}

func (_c *CarrotBarCall) OnBur(aParam string) *CarrotBurCall {
	return _c.Parent.OnBur(aParam)
}

func (_c *CarrotBarCall) OnBarRaw(aParam interface{}) *CarrotBarCall {
	return _c.Parent.OnBarRaw(aParam)
}

func (_c *CarrotBarCall) OnBurRaw(aParam interface{}) *CarrotBurCall {
	return _c.Parent.OnBurRaw(aParam)
}

func (_m *CarrotMock) Bur(aParam string) *c.Cherry {
	_ret := _m.Called(aParam)

	if _rf, ok := _ret.Get(0).(func(string) *c.Cherry); ok {
		return _rf(aParam)
	}

	_ra0, _ := _ret.Get(0).(*c.Cherry)

	return _ra0
}

func (_m *CarrotMock) OnBur(aParam string) *CarrotBurCall {
	return &CarrotBurCall{Call: _m.Mock.On("Bur", aParam), Parent: _m}
}

func (_m *CarrotMock) OnBurRaw(aParam interface{}) *CarrotBurCall {
	return &CarrotBurCall{Call: _m.Mock.On("Bur", aParam), Parent: _m}
}

type CarrotBurCall struct {
	*mock.Call
	Parent *CarrotMock
}

func (_c *CarrotBurCall) Panic(msg string) *CarrotBurCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *CarrotBurCall) Once() *CarrotBurCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *CarrotBurCall) Twice() *CarrotBurCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *CarrotBurCall) Times(i int) *CarrotBurCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *CarrotBurCall) WaitUntil(w <-chan time.Time) *CarrotBurCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *CarrotBurCall) After(d time.Duration) *CarrotBurCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *CarrotBurCall) Run(fn func(args mock.Arguments)) *CarrotBurCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *CarrotBurCall) Maybe() *CarrotBurCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *CarrotBurCall) TypedReturns(a *c.Cherry) *CarrotBurCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *CarrotBurCall) ReturnsFn(fn func(string) *c.Cherry) *CarrotBurCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *CarrotBurCall) TypedRun(fn func(string)) *CarrotBurCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_aParam := args.String(0)
		fn(_aParam)
	})
	return _c
}

func (_c *CarrotBurCall) OnBar(aParam string) *CarrotBarCall {
	return _c.Parent.OnBar(aParam)
}

func (_c *CarrotBurCall) OnBur(aParam string) *CarrotBurCall {
	return _c.Parent.OnBur(aParam)
}

func (_c *CarrotBurCall) OnBarRaw(aParam interface{}) *CarrotBarCall {
	return _c.Parent.OnBarRaw(aParam)
}

func (_c *CarrotBurCall) OnBurRaw(aParam interface{}) *CarrotBurCall {
	return _c.Parent.OnBurRaw(aParam)
}

// OrangeMock mock of Orange.
type OrangeMock struct{ mock.Mock }

// NewOrangeMock creates a new OrangeMock.
func NewOrangeMock(tb testing.TB) *OrangeMock {
	tb.Helper()

	m := &OrangeMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *OrangeMock) Juice() <-chan struct{} {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() <-chan struct{}); ok {
		return _rf()
	}

	_ra0, _ := _ret.Get(0).(<-chan struct{})

	return _ra0
}

func (_m *OrangeMock) OnJuice() *OrangeJuiceCall {
	return &OrangeJuiceCall{Call: _m.Mock.On("Juice"), Parent: _m}
}

func (_m *OrangeMock) OnJuiceRaw() *OrangeJuiceCall {
	return &OrangeJuiceCall{Call: _m.Mock.On("Juice"), Parent: _m}
}

type OrangeJuiceCall struct {
	*mock.Call
	Parent *OrangeMock
}

func (_c *OrangeJuiceCall) Panic(msg string) *OrangeJuiceCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *OrangeJuiceCall) Once() *OrangeJuiceCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *OrangeJuiceCall) Twice() *OrangeJuiceCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *OrangeJuiceCall) Times(i int) *OrangeJuiceCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *OrangeJuiceCall) WaitUntil(w <-chan time.Time) *OrangeJuiceCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *OrangeJuiceCall) After(d time.Duration) *OrangeJuiceCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *OrangeJuiceCall) Run(fn func(args mock.Arguments)) *OrangeJuiceCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *OrangeJuiceCall) Maybe() *OrangeJuiceCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *OrangeJuiceCall) TypedReturns(a <-chan struct{}) *OrangeJuiceCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *OrangeJuiceCall) ReturnsFn(fn func() <-chan struct{}) *OrangeJuiceCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *OrangeJuiceCall) TypedRun(fn func()) *OrangeJuiceCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *OrangeJuiceCall) OnJuice() *OrangeJuiceCall {
	return _c.Parent.OnJuice()
}

func (_c *OrangeJuiceCall) OnJuiceRaw() *OrangeJuiceCall {
	return _c.Parent.OnJuiceRaw()
}
